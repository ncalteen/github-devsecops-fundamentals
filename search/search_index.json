{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub DevSecOps Fundamentals | Lab Instructions","text":"<ul> <li> Value Stream Management</li> <li> Version Control</li> <li> Securing the Software Supply Chain</li> <li> Release Automation</li> </ul>"},{"location":"Release-Automation/","title":"Release Automation Lab","text":"<p>How do I deploy and release artifacts/packages?</p> <p>This lab will walk through release automation as part of a DevSecOps pipeline.</p>"},{"location":"Release-Automation/#objectives","title":"Objectives","text":"<p>As part of this lab, you will implement the following:</p> <ul> <li> Continuous deployment to GitHub Pages</li> <li> Automatic creation of release artifacts</li> <li> Environment-specific deployment tracking</li> <li> Static code analysis</li> </ul>"},{"location":"Release-Automation/#steps","title":"Steps","text":"<ol> <li>Prerequisites</li> <li>Setup</li> <li>Continuous Deployment</li> <li>Release Management</li> <li>Environment Management</li> <li>Static Code Analysis</li> </ol>"},{"location":"Release-Automation/continuous-deployment/","title":"Continuous Deployment","text":"<p>Now that you have your repository and are able to run the app locally, it's time to set up automatic deployments. Following GitHub flow, our goal is to configure automatic deployment to GitHub Pages any time a pull request (PR) is successfully reviewed and merged into our default branch, <code>main</code>. To do this, we will need to configure a continuous deployment workflow.</p>"},{"location":"Release-Automation/continuous-deployment/#step-1-create-a-new-branch","title":"Step 1: Create a New Branch","text":"<ol> <li>Open your repository locally or in Codespaces</li> <li>Create a new branch</li> </ol> <pre><code>git checkout -b cd-workflow\n</code></pre> <ol> <li>Create a new file, <code>.github/workflows/continuous-deployment.yml</code> with the    following contents:</li> </ol> <pre><code>name: Continuous Deployment\n\n# Run this action when PRs targeting `main` are closed.\non:\npull_request:\ntypes:\n- closed\nbranches:\n- main\n\n# The following permissions are required to deploy to GitHub Pages.\npermissions:\ncontents: write\npages: write\nid-token: write\n\n# If multiple PRs are merged around the same time, this will ensure all but\n# the latest workflow run are cancelled, so that the latest content is\n# deployed to GitHub Pages.\nconcurrency:\ngroup: pages\ncancel-in-progress: true\n\njobs:\ndeploy:\nname: Deploy\nruns-on: ubuntu-latest\n\n# Only run if the PR was merged successfully.\nif: ${{ github.event.pull_request.merged == true }}\n\nsteps:\n# Checkout the repository onto the runner.\n- name: Checkout\nid: checkout\nuses: actions/checkout@v4\n\n# Install the same version of Python that is used in the project. Cache\n# dependencies to reduce workflow run time.\n- name: Setup Python\nid: setup-python\nuses: actions/setup-python@v4\nwith:\npython-version: 3.11\ncache: poetry\n\n# Install/update any dependencies from the cache.\n- name: Install Dependencies\nid: install\nrun: |\npip install poetry\npoetry install\n\n# Configure GitHub Pages on the repository.\n- name: Set up Pages\nid: pages\nuses: actions/configure-pages@v3\n\n# Deploy the updated content to the `github-pages` branch and update\n# the currently-running site.\n- name: Deploy to GitHub Pages\nid: deploy\nrun: |\npoetry run mkdocs gh-deploy --force --theme material\n</code></pre> <ol> <li>Stage and commit the new file</li> </ol> <pre><code>git add .github/workflows/continuous-deployment.yml\ngit commit -m 'Add Continuous Deployment workflow'\n</code></pre> <ol> <li>Push the new branch to the remote repository on GitHub</li> </ol> <pre><code>git push -u origin cd-workflow\n</code></pre>"},{"location":"Release-Automation/continuous-deployment/#step-2-create-a-pull-request","title":"Step 2: Create a Pull Request","text":"<p>Now that your changes are ready for review, you can open a pull request!</p> <ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>If possible, feel free to add someone as a collaborator and have them review your PR! Otherwise, feel free to skip the following steps.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/continuous-deployment/#step-3-merge","title":"Step 3: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Now that you have a workflow in place, it's time to make some changes and see it in action!</p>"},{"location":"Release-Automation/continuous-deployment/#step-4-create-a-branch","title":"Step 4: Create a Branch","text":"<ol> <li>In your local repository or codespace, update your repository and create a    new branch</li> </ol> <pre><code>git checkout main\ngit pull\ngit checkout -b new-feature\n</code></pre> <ol> <li>Make some changes to the site (try updating the following text!)</li> </ol> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <ol> <li>Stage and commit your changes</li> </ol> <pre><code>git add .\ngit commit -m 'Updating site contents'\n</code></pre> <ol> <li>Push your new branch to the remote on GitHub</li> </ol> <pre><code>git push -u origin new-feature\n</code></pre>"},{"location":"Release-Automation/continuous-deployment/#step-5-create-a-pull-request","title":"Step 5: Create a Pull Request","text":"<ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>As with the last PR, feel free to have another person review and approve your changes. Otherwise, go ahead and merge them into <code>main</code>.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/continuous-deployment/#step-6-merge","title":"Step 6: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Now that the PR has been merged, your continuous deployment action will be invoked!</p>"},{"location":"Release-Automation/continuous-deployment/#step-7-monitor-github-actions","title":"Step 7: Monitor GitHub Actions","text":"<ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Actions tab</li> <li>Locate and open the currently-running Continuous Deployment action</li> <li>Click the Deploy step and review the log outputs</li> </ol> <p>In the logs, you should see a log line similar to the below:</p> <pre><code>INFO    -  Your documentation should shortly be available at: https://githubuniverseworkshops.github.io/github-devsecops-fundamentals/\n</code></pre> <ol> <li>Open the link from the logs to view your site!</li> </ol>"},{"location":"Release-Automation/continuous-deployment/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have now enabled continuous deployment to GitHub Pages! Next, it's time to configure Release Management.</p>"},{"location":"Release-Automation/environment-management/","title":"Environment Management","text":"<p>As any software project evolves over time, it will become more complex. As the level of complexity increases, there will likely be a need to maintain different production-like environments for purposes such as testing, QA, UAT, and more.</p> <p>GitHub Environments can be used to link different deployment targets to a repository, as well as to control a number of different features. For example, suppose you have separate environments, <code>development</code>, <code>staging</code>, and <code>production</code>. Each environment corresponds to a different Azure subscription. In order to deploy to each of these, you may require different credentials. Repository environments can be used to scope secretes, enforce deployment rules, and more.</p> <p>In this section, you will configure required approvals to ensure that specific users approve any future changes to your site.</p>"},{"location":"Release-Automation/environment-management/#step-1-update-the-environment","title":"Step 1: Update the Environment","text":"<p>When GitHub Pages is enabled and first deployed for a repository, a separate environment named <code>github-pages</code> is automatically created. Any deployments to your site will use this environment. In this scenario, suppose your organization requires human review of changes to your public documentation. Here, you will modify environment settings to require approvals before deployments can take place.</p> <ol> <li>Open your repository on GitHub.com</li> <li>Click the Settings tab</li> <li>Click Environments</li> <li>Click the <code>github-pages</code> environment</li> <li>Select the Required reviewers checkbox</li> <li>In the new input field, enter your GitHub handle</li> </ol> <p>Feel free to enter a different user's handle and have them review the    deployment instead!</p> <ol> <li>In the Deployment branches section, click Remove next to any allowed    branches</li> </ol> <p>This way, when a pull request is merged from a feature branch, it can deploy    to GitHub Pages.</p> <ol> <li>Click Save protection rules</li> </ol> <p>Now that the environment protection rule is in place, try creating a new pull request and merging it in. In this case, the required approver(s) will get a notification that this deployment is awaiting their review.</p>"},{"location":"Release-Automation/environment-management/#step-2-create-a-branch","title":"Step 2: Create a Branch","text":"<ol> <li>In your local repository or codespace, update your repository and create a    new branch</li> </ol> <pre><code>git checkout main\ngit pull\ngit checkout -b new-feature\n</code></pre> <ol> <li>Make some changes to the site</li> <li>In <code>pyproject.toml</code>, update the version field (e.g. change it from    <code>0.1.0</code> to <code>0.2.0</code>)</li> <li>Open <code>.github/workflows/continuous-deployment.yml</code> for editing and modify it    to include the following contents:</li> </ol> <pre><code>name: Continuous Deployment\n\n# Run this action when PRs targeting `main` are closed.\non:\npull_request:\ntypes:\n- closed\nbranches:\n- main\n\n# The following permissions are required to deploy to GitHub Pages.\npermissions:\ncontents: write\npages: write\nid-token: write\n\n# If multiple PRs are merged around the same time, this will ensure all but\n# the latest workflow run are cancelled, so that the latest content is\n# deployed to GitHub Pages.\nconcurrency:\ngroup: pages\ncancel-in-progress: true\n\njobs:\ndeploy:\nname: Deploy\nruns-on: ubuntu-latest\n\nenvironment: github-pages\n\n# Only run if the PR was merged successfully.\nif: ${{ github.event.pull_request.merged == true }}\n\nsteps:\n# Checkout the repository onto the runner.\n- name: Checkout\nid: checkout\nuses: actions/checkout@v4\n\n# Install the same version of Python that is used in the project. Cache\n# dependencies to reduce workflow run time.\n- name: Setup Python\nid: setup-python\nuses: actions/setup-python@v4\nwith:\npython-version: 3.11\ncache: poetry\n\n# Install/update any dependencies from the cache.\n- name: Install Dependencies\nid: install\nrun: |\npip install poetry\npoetry install\n\n# Configure GitHub Pages on the repository.\n- name: Set up Pages\nid: pages\nuses: actions/configure-pages@v3\n\n# Deploy the updated content to the `gh-pages` branch and update the\n# currently-running site.\n- name: Deploy to GitHub Pages\nid: deploy\nrun: |\npoetry run mkdocs gh-deploy --force --theme material\n\n# Get the version and update the tags to use in the release\n- name: Tag Commit\nid: tag-commit\nuses: issue-ops/semver@v0.1.0\nwith:\nmanifest-path: pyproject.toml\nworkspace: ${{ github.workspace }}\nref: main\n\n# Use the version output from the previous step for the release\n# Prepend a 'v' to the beginning (e.g. 'v1.2.3')\n- name: Create Release\nid: create-release\nuses: issue-ops/releaser@v0.1.1\nwith:\ntag: v${{ steps.tag-commit.outputs.version }}\n</code></pre> <ol> <li>Stage and commit your changes</li> </ol> <pre><code>git add .\ngit commit -m 'Updating site contents v0.2.0'\n</code></pre> <ol> <li>Push your new branch to the remote on GitHub</li> </ol> <pre><code>git push -u origin new-feature\n</code></pre>"},{"location":"Release-Automation/environment-management/#step-3-create-a-pull-request","title":"Step 3: Create a Pull Request","text":"<ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>As with the last PR, feel free to have another person review and approve your changes. Otherwise, go ahead and merge them into <code>main</code>.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/environment-management/#step-4-merge","title":"Step 4: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Once the PR is merged, the required reviewer(s) will receive an email notification that this deployment is awaiting their review.</p>"},{"location":"Release-Automation/environment-management/#step-5-approve-the-deployment","title":"Step 5: Approve the Deployment","text":"<ol> <li>Navigate to the repository on GitHub.com</li> <li>Click the Actions tab</li> <li>Click the latest Continuous Deployment workflow run</li> <li>Click Review deployments</li> <li>Select the checkbox next to github-pages</li> <li>Click Approve and deploy</li> </ol> <p>At this point, you can monitor the progress of the deployment and continue updating your site.</p>"},{"location":"Release-Automation/prerequisites/","title":"Release Automation Lab - Prerequisites","text":""},{"location":"Release-Automation/prerequisites/#step-1-copy-this-template","title":"Step 1: Copy this Template","text":"<p>If you haven't done so already, you will need to create a personal repository using this as a template.</p> <ol> <li>Click Use this template</li> <li>Click Create a new repository</li> <li>In the Owner drop down menu, select an owner for the new repository (e.g.    your username)</li> <li>In the Repository name field, enter a name</li> <li>Click Create repository</li> </ol>"},{"location":"Release-Automation/prerequisites/#step-2-open-the-repository","title":"Step 2: Open the Repository","text":"<p>Once your personal repository has been created, you will need to either clone it locally or open it in GitHub Codespaces. That way, you can create branches, make changes, and submit PRs  Choose one of the options below based on your preference.</p> <ul> <li>Clone Locally</li> <li>Open in Codespaces</li> </ul>"},{"location":"Release-Automation/prerequisites/#step-21-clone-locally","title":"Step 2.1: Clone Locally","text":"<ol> <li>Click Code</li> <li>Copy the HTTPS or SSH URL for the repository</li> <li> <p>Using one of the following, clone the repository to your local workstation</p> </li> <li> <p>Clone a repository from GitHub Desktop</p> </li> <li> <p>Clone using the GitHub CLI</p> <pre><code>gh repo clone &lt;owner&gt;/&lt;repo&gt;\n</code></pre> </li> <li> <p>Clone using the Git CLI</p> <pre><code>git clone &lt;url&gt;\n</code></pre> </li> </ol>"},{"location":"Release-Automation/prerequisites/#step-22-open-in-codespaces","title":"Step 2.2: Open in Codespaces","text":"<p>It's time to create your Codespace and start working on your application!</p> <ol> <li>Open the Code tab of this repository</li> <li>Click Code</li> <li>Click Create codespace on main</li> </ol> <p>Once the codespace finishes setting up, you will have a fully-functional VS    Code environment in the cloud! All the core tools are already installed.</p>"},{"location":"Release-Automation/prerequisites/#next-steps","title":"Next Steps","text":"<p>Continue on to Setup!</p>"},{"location":"Release-Automation/release-management/","title":"Release Management","text":"<p>Having continuous deployment in place is great, but what if you're deploying to something more distributed? For example, if you have a Node.js application that runs in a container, and you want to deploy to Kubernetes clusters across multiple regions, it makes sense to retain different release versions of your application, in case you need to roll back for any reason.</p> <p>In this section, you're going to configure automatic creation of release artifacts any time there is a version change in your project. For information on version numbering, see Semantic Versioning.</p>"},{"location":"Release-Automation/release-management/#step-1-create-a-new-branch","title":"Step 1: Create a New Branch","text":"<ol> <li>Open your repository locally or in Codespaces</li> <li>Create a new branch</li> </ol> <pre><code>git checkout -b releases\n</code></pre> <ol> <li>Open <code>.github/workflows/continuous-deployment.yml</code> for editing and modify it    to include the following contents:</li> </ol> <pre><code>name: Continuous Deployment\n\n# Run this action when PRs targeting `main` are closed.\non:\npull_request:\ntypes:\n- closed\nbranches:\n- main\n\n# The following permissions are required to deploy to GitHub Pages.\npermissions:\ncontents: write\npages: write\nid-token: write\n\n# If multiple PRs are merged around the same time, this will ensure all but\n# the latest workflow run are cancelled, so that the latest content is\n# deployed to GitHub Pages.\nconcurrency:\ngroup: pages\ncancel-in-progress: true\n\njobs:\ndeploy:\nname: Deploy\nruns-on: ubuntu-latest\n\n# Only run if the PR was merged successfully.\nif: ${{ github.event.pull_request.merged == true }}\n\nsteps:\n# Checkout the repository onto the runner.\n- name: Checkout\nid: checkout\nuses: actions/checkout@v4\n\n# Install the same version of Python that is used in the project. Cache\n# dependencies to reduce workflow run time.\n- name: Setup Python\nid: setup-python\nuses: actions/setup-python@v4\nwith:\npython-version: 3.11\ncache: poetry\n\n# Install/update any dependencies from the cache.\n- name: Install Dependencies\nid: install\nrun: |\npip install poetry\npoetry install\n\n# Configure GitHub Pages on the repository.\n- name: Set up Pages\nid: pages\nuses: actions/configure-pages@v3\n\n# Deploy the updated content to the `gh-pages` branch and update the\n# currently-running site.\n- name: Deploy to GitHub Pages\nid: deploy\nrun: |\npoetry run mkdocs gh-deploy --force --theme material\n\n# Get the version and update the tags to use in the release\n- name: Tag Commit\nid: tag-commit\nuses: issue-ops/semver@v0.1.0\nwith:\nmanifest-path: pyproject.toml\nworkspace: ${{ github.workspace }}\nref: main\n\n# Use the version output from the previous step for the release\n# Prepend a 'v' to the beginning (e.g. 'v1.2.3')\n- name: Create Release\nid: create-release\nuses: issue-ops/releaser@v0.1.2\nwith:\ntag: v${{ steps.tag-commit.outputs.version }}\n</code></pre> <ol> <li>Stage and commit the new file</li> </ol> <pre><code>git add .github/workflows/continuous-deployment.yml\ngit commit -m 'Add Continuous Deployment workflow'\n</code></pre> <ol> <li>Push the new branch to the remote repository on GitHub</li> </ol> <pre><code>git push -u origin releases\n</code></pre>"},{"location":"Release-Automation/release-management/#step-2-create-a-pull-request","title":"Step 2: Create a Pull Request","text":"<p>Now that your changes are ready for review, you can open a pull request!</p> <ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>If possible, feel free to add someone as a collaborator and have them review your PR! Otherwise, feel free to skip the following steps.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/release-management/#step-3-merge","title":"Step 3: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Now that you have a workflow in place, it's time to make some changes and see it in action!</p>"},{"location":"Release-Automation/release-management/#step-4-create-a-branch","title":"Step 4: Create a Branch","text":"<ol> <li>In your local repository or codespace, update your repository and create a    new branch</li> </ol> <pre><code>git checkout main\ngit pull\ngit checkout -b new-feature\n</code></pre> <ol> <li>Make some changes to the site</li> <li>In <code>pyproject.toml</code>, update the version field (e.g. change it from    <code>0.1.0</code> to <code>0.2.0</code>)</li> <li>Stage and commit your changes</li> </ol> <pre><code>git add .\ngit commit -m 'Updating site contents v0.2.0'\n</code></pre> <ol> <li>Push your new branch to the remote on GitHub</li> </ol> <pre><code>git push -u origin new-feature\n</code></pre>"},{"location":"Release-Automation/release-management/#step-5-create-a-pull-request","title":"Step 5: Create a Pull Request","text":"<ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>As with the last PR, feel free to have another person review and approve your changes. Otherwise, go ahead and merge them into <code>main</code>.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/release-management/#step-6-merge","title":"Step 6: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Now that the PR has been merged, your continuous deployment action will be invoked! Similar to the previous section, this will update the site contents on GitHub Pages. It will also create a new release that can be used to download the latest contents of the repository as an artifact.</p>"},{"location":"Release-Automation/release-management/#step-7-review-the-release","title":"Step 7: Review the Release","text":"<ol> <li>Click the Code tab of the repository</li> <li>Locate the Releases section</li> <li>Click the latest release</li> <li>Review the contents</li> </ol>"},{"location":"Release-Automation/release-management/#next-steps","title":"Next Steps","text":"<p>Congratulations! You have now enabled continuous releases! Next, it's time to configure Environment Management.</p>"},{"location":"Release-Automation/setup/","title":"Setup","text":"<p>Now that you have the lab code, you can start working on your application! This document will walk you through the initial setup steps so that you can start developing.</p>"},{"location":"Release-Automation/setup/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Before you can run the sample app locally (or in your Codespace), you will need to install some dependencies.</p> <ol> <li>Run the following command to install <code>poetry</code>,    a tool for dependency management and packaging</li> </ol> <pre><code>pip install poetry\n</code></pre> <p>Next, you will need to install the dependencies for the application itself. This can be done from the terminal or the command palette:</p> <p>From the terminal:</p> <ol> <li>In the terminal of your codespace, run the following command</li> </ol> <pre><code>poetry install\n</code></pre> <p>From the command palette:</p> <ol> <li>Press Ctrl + Shift + P to open the command palette</li> <li>Enter <code>Tasks: Run Task</code></li> <li>Press Enter</li> <li>Select <code>Python: Install Dependencies</code> from the list of options</li> </ol>"},{"location":"Release-Automation/setup/#step-2-start-the-github-pages-site-locally","title":"Step 2: Start the GitHub Pages Site Locally","text":"<p>The sample app can be started from the terminal or the command palette.</p> <p>From the terminal:</p> <ol> <li>Run the following command</li> </ol> <pre><code>poetry run mkdocs serve\n</code></pre> <p>From the command palette:</p> <ol> <li>Press Ctrl + Shift + P to open the command palette</li> <li>Enter <code>Tasks: Run Task</code></li> <li>Press Enter</li> <li>Select <code>Python: Run App</code> from the list of options</li> </ol> <p>If you are running this lab in Codespaces, it will detect that your app is running and prompt you to open it in a new browser tab.</p> <ol> <li>Click Open in Browser</li> </ol> <p>If you are running the app locally, you will see a localhost URL in the <code>Run App</code> task logs. It should look similar to the following:</p> <pre><code>http://127.0.0.1:8000/pages/githubuniverseworkshops/github-devsecops-fundamentals/\n</code></pre> <ol> <li>Copy the URL</li> <li>Open it in your web browser</li> </ol>"},{"location":"Release-Automation/setup/#next-steps","title":"Next Steps","text":"<p>Now that you have everything, time to automate your release pipeline! Continue on to Continuous Deployment.</p>"},{"location":"Release-Automation/static-code-analysis/","title":"Static Code Analysis","text":"<p>As the final step of this lab, you are going to integrate GitHub Advanced Security (GHAS) into your CI/CD pipeline. GHAS uses CodeQL static analysis to detect potential security vulnerabilities in a project. Combined with automation using GitHub Actions, GHAS can provide fast notification of vulnerabilities and potential remediation steps.</p> <p>[!NOTE]</p> <p>GHAS requires additional licensing! If you are running this lab in a company-managed GitHub account, you may not be able to complete this step.</p>"},{"location":"Release-Automation/static-code-analysis/#step-1-create-a-new-branch","title":"Step 1: Create a New Branch","text":"<ol> <li>Open your repository locally or in Codespaces</li> <li>Create a new branch</li> </ol> <pre><code>git checkout -b codeql-workflow\n</code></pre> <ol> <li>Create a new file, <code>.github/workflows/codeql.yml</code> with the following    contents:</li> </ol> <pre><code>name: CodeQL\n\non:\npush:\nbranches:\n- main\npull_request:\nbranches:\n- main\n\njobs:\nanalyze:\nname: Analyze\nruns-on: ubuntu-latest\n\npermissions:\nactions: read\ncontents: read\nsecurity-events: write\n\nstrategy:\nfail-fast: false\nmatrix:\nlanguage: ['python']\n\nsteps:\n- name: Checkout repository\nid: checkout\nuses: actions/checkout@v4\n\n- name: Initialize CodeQL\nid: initialize\nuses: github/codeql-action/init@v2\nwith:\nlanguages: ${{ matrix.language }}\n\n- name: Autobuild\nid: autobuild\nuses: github/codeql-action/autobuild@v2\n\n- name: Perform CodeQL Analysis\nid: analyze\nuses: github/codeql-action/analyze@v2\nwith:\ncategory: '/language:${{matrix.language}}'\n</code></pre> <ol> <li>Stage and commit the new file</li> </ol> <pre><code>git add .github/workflows/continuous-deployment.yml\ngit commit -m 'Add Continuous Deployment workflow'\n</code></pre> <ol> <li>Push the new branch to the remote repository on GitHub</li> </ol> <pre><code>git push -u origin cd-workflow\n</code></pre>"},{"location":"Release-Automation/static-code-analysis/#step-2-create-a-pull-request","title":"Step 2: Create a Pull Request","text":"<p>Now that your changes are ready for review, you can open a pull request!</p> <ol> <li>Navigate to your repository on GitHub.com</li> <li>Click the Pull requests tab</li> <li>In the compare drop-down menu, select your branch (e.g. <code>cd-workflow</code>)</li> <li>Click Create pull request</li> <li>Enter a title and description for your PR</li> <li>Click Create pull request</li> </ol> <p>If possible, feel free to add someone as a collaborator and have them review your PR! Otherwise, feel free to skip the following steps.</p> <ol> <li>Click the cog icon next to the Reviewers section and add a reviewer</li> <li>Click assign yourself to assign the PR to yourself</li> <li>(Optional) Add any labels, projects, and milestones</li> </ol>"},{"location":"Release-Automation/static-code-analysis/#step-3-merge","title":"Step 3: Merge","text":"<p>Once you're ready, you can merge your PR into <code>main</code>.</p> <ol> <li>Click Merge pull request</li> <li>Click Confirm merge</li> <li>Click Delete branch</li> </ol> <p>Now that you have a workflow in place, it's time to make some changes and see it in action!</p>"},{"location":"Version-Control/","title":"Version Control Lab","text":"<p>How do I efficiently develop a project and manage code?</p> <p>Software development may be approached individually or collaboratively. In either case, there is a basic need for accessible, scalable storage for project files, and the ability to track the evolution of the project.</p> <p><code>git</code> helps track project files and assets as they change over time, giving transparency to different points in the history of the software development and enabling easy switches across those points.</p>"},{"location":"Version-Control/#objectives","title":"Objectives","text":"<ul> <li> Rapidly onboard into the project</li> <li> Implement features motivated by relevance in the business value stream</li> <li> Locally validate work</li> <li> Collaborate with stakeholders to validate done requirement</li> </ul>"},{"location":"Version-Control/#steps","title":"Steps","text":"<ol> <li>Prerequisites</li> <li>Setup Development Environment</li> <li>Implement Features</li> <li>Run Test</li> <li>Collaborate with Team to Validate Work</li> </ol>"},{"location":"Version-Control/#lab-instructions","title":"Lab Instructions","text":"<ul> <li>Install requirements</li> <li>add /home/codespace/.local/lib/python3.10/site-packages/bin/mkdocs to path</li> </ul>"},{"location":"Version-Control/#github-repositories","title":"GitHub Repositories","text":"<ol> <li>Fork the repository</li> <li>Clone the forked repository to your local machine</li> <li>Create a new branch</li> <li>Create a new file</li> <li>Add the file to the repository</li> <li>Commit the file to the repository</li> <li>Push the file to the repository</li> <li>Create a pull request</li> <li>Merge the pull request</li> </ol>"},{"location":"Version-Control/#codespaces-to-be-added-later","title":"Codespaces (To be added later)","text":"<ol> <li>Navigate to the repository</li> <li>Click on the <code>Code</code> button</li> <li>Click on the <code>Open with Codespaces</code> button</li> <li>Click on the <code>New codespace</code> button</li> <li>Wait for the codespace to be created</li> <li>Click on the <code>Open in VS Code</code> button</li> <li>Click on the <code>Terminal</code> menu item</li> <li>Click on the <code>New Terminal</code> menu item</li> <li>Run the following command in the terminal window</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <ol> <li>Click on the <code>Explorer</code> menu item</li> <li>Click on the <code>README.md</code> file</li> <li>Click on the <code>Edit</code> button</li> </ol>"},{"location":"Version-Control/#github-projects-and-issues","title":"GitHub Projects and Issues","text":"<ol> <li>Navigate to the repository</li> <li>Click on the <code>Projects</code> tab</li> <li>Click on the <code>Create a project</code> button</li> <li>Enter <code>Lab 1</code> for the project name</li> <li>Click on the <code>Create project</code> button</li> <li>Click on the <code>Add cards</code></li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a new branch</code> for the issue title</li> <li>Enter <code>Create a new branch</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a new file</code> for the issue title</li> <li>Enter <code>Create a new file</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Add the file to the repository</code> for the issue title</li> <li>Enter <code>Add the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Commit the file to the repository</code> for the issue title</li> <li>Enter <code>Commit the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Push the file to the repository</code> for the issue title</li> <li>Enter <code>Push the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a pull request</code> for the issue title</li> <li>Enter <code>Create a pull request</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Merge the pull request</code> for the issue title</li> <li>Enter <code>Merge the pull request</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Delete the branch</code> for the issue title</li> <li>Enter <code>Delete the branch</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Close the issue</code> for the issue title</li> <li>Enter <code>Close the issue</code> for the issue description</li> </ol>"},{"location":"Version-Control/implement-features/","title":"Version Control - Implement Features","text":"<p>We want to implement a game of Tetris to excite our site visitors.</p>"},{"location":"Version-Control/implement-features/#step-1-implement-the-game-and-integrate-it-into-the-site","title":"Step 1: Implement the game and integrate it into the site","text":""},{"location":"Version-Control/prerequisites/","title":"Version Control - Prerequisites","text":""},{"location":"Version-Control/prerequisites/#step-1-copy-this-template","title":"Step 1: Copy this Template","text":"<ol> <li>Login to your GitHub account</li> <li>Click Use this template</li> <li>Click Create a new repository</li> <li>In the Owner drop down menu, select an owner for the new repository (e.g. your username)</li> <li>In the Repository name field, enter a name</li> <li>Click Create repository</li> </ol>"},{"location":"Version-Control/prerequisites/#step-2-open-the-repository","title":"Step 2: Open the Repository","text":"<p>Once your personal repository has been created, you will need to either clone it locally or open it in GitHub Codespaces. That way, you can create branches, make changes, and submit PRs  Choose the Open in Codespaces option.</p>"},{"location":"Version-Control/prerequisites/#step-22-open-in-codespaces","title":"Step 2.2: Open in Codespaces","text":"<p>It's time to create your Codespace and start working on your application!</p> <ol> <li>Open the Code tab of this repository</li> <li>Click Code</li> <li>Click Create codespace on main    Once the codespace finishes setting up, you will have a fully-functional VS    Code environment in the cloud! All the core tools are already installed.</li> <li>Explore the environment!</li> </ol>"},{"location":"Version-Control/prerequisites/#next-steps","title":"Next Steps","text":"<p>Continue on to Setup!</p>"},{"location":"Version-Control/setup/","title":"Version Control - Setup","text":"<p>Now that you have the lab code, you can start working on your application! This document will walk you through the initial setup steps so that you can start developing.</p>"},{"location":"Version-Control/setup/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Before you can run the sample app locally (or in your Codespace), you will need to install some dependencies.</p> <ol> <li>Run the following command to install the project requirements:</li> </ol> <pre><code>python3 -m pip install --requirement requirements.txt\n</code></pre> <ol> <li> <p>If you would like Codespaces to automatically do this for you next time you start working on the project you may add the following declaration into the root of the Codespaces configuration object:</p> <pre><code>{\n...\n\"postStartCommand\": \"python3 -m pip install --requirement requirements.txt\"\n...\n}\n</code></pre> </li> <li> <p>Confirm that the site building tool is available by running the following command</p> </li> </ol> <pre><code>python3 -m mkdocs serve\n</code></pre>"},{"location":"Version-Control/setup/#next-steps","title":"Next Steps","text":"<p>Now that you have rapidly onboarded yourself to the project, it time to Implement Features!</p>"}]}